name: CI

on:
  push:
    branches:
      - main

env:
  REGISTRY: "registry.digitalocean.com/box-registry"
  IMAGE_NAME: "resource-keeper-api"
  CONTAINER_APP: "app"
  CONTAINER_DB: "db" 

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Build container image
        run: docker-compose up --project-name $(echo IMAGE_NAME)-$(echo CONTAINER_APP) --build app:$(echo $GITHUB_SHA | head -c7) .
        # run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo IMAGE_NAME)-$(echo CONTAINER_APP):$(echo $GITHUB_SHA | head -c7)
        # run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

  deploy:
    runs-on: ubuntu-latest 
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,,CONTAINER_NAME
          script: |
            # Login into Digital Ocean Registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} $(echo $REGISTRY)
            # Stop running container
            docker-compose stop
            # docker stop $(echo $CONTAINER_NAME)
            # Remove old container
            docker rm $(echo IMAGE_NAME)-$(echo CONTAINER_APP)
            docker rm $(echo IMAGE_NAME)-$(echo CONTAINER_DB)
            # Set env  variables
            export DB_POSTGRES_PASSWORD=${{ secrets.DB_POSTGRES_PASSWORD }}
            export SOLT=${{ secrets.SOLT }}
            export SIGNIK_KEY=${{ secrets.SIGNIK_KEY }}
            export ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
            # Run a new container from a new image
            docker-compose up -d
            # docker run -e TOKEN -e CONSUMER_KEY -e AUTH_SERVER_URL -d \
            # --restart always \
            # --publish 80:80 \
            # --name $(echo $CONTAINER_NAME) \
            # $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
